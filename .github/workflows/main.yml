name: release

on:
  push:
    tags:
      - '*'

  workflow_dispatch:
  
env:
  # Increase this value to reset cache if environment.yml has not changed
  CACHE_NUMBER: 0
  
jobs:
  build_release:
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        os: ["windows-latest"]  # "windows-latest", "ubuntu-latest","macos-latest", 
        label: ["windows-64"] # "linux-64", "windows-64", "mac"
        prefix: ["C:\\Miniconda3\\envs\\myenv"] # "C:\Miniconda3\envs\myenv", "/usr/share/miniconda/envs/myenv", "/Users/runner/miniconda3/envs/myenv",  
        python-version: ["3.7"]
        exe_name: ["main.exe"]  # "main.exe", "main"
    name: ${{ matrix.label }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: setup miniconda
        uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          auto-update-conda: true
          use-only-tar-bz2: true
          python-version: ${{ matrix.python-version }}
          activate-environment: myenv
          
      - name: conda info
        run: |
          conda list
          conda env list
          echo $CONDA_PREFIX
          
      - name: set cache date
        run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
        
      - name: cache conda env
        uses: actions/cache@v3
        with:
          path: ${{ matrix.prefix }}
          key: conda-${{ matrix.label }}-${{ env.DATE }}-${{ hashFiles('environment.yml') }}-${{ env.CACHE_NUMBER }}
        id: cache
        
      - name: update environment
        if: steps.cache.outputs.cache-hit != 'true'
        run: conda env update -n myenv -f environment.yml
      
      - name: naive test main
        run: |
          conda list
          conda env list
          echo $CONDA_PREFIX
          cd CapCalibrator
          python main.py --help
        
      - name: version
        run: |
          cd CapCalibrator
          echo "STORM_VERSION=$(python main.py --version)" >> $GITHUB_ENV
          
      - name: build main
        run: |
          pwd
          cd CapCalibrator
          pyinstaller main.spec
      
      - name: print dir content 1
        run: |
          ls
          ls CapCalibrator
          ls CapCalibrator/dist
          ls CapCalibrator/dist/main
        
      - name: archive release
        uses: thedoctor0/zip-release@0.6.2
        with:
          type: 'zip'
          filename: ${{ matrix.label }}.zip
          path: './CapCalibrator/dist/main'
      
      - name: print dir content 2
        run: |
          ls
          ls CapCalibrator
          ls CapCalibrator/dist
          ls CapCalibrator/dist/main
          
      - name: create release
        uses: actions/create-release@v1.10.0
        id: create_release
        with:
          release_name: ${{ env.STORM_VERSION }}
          artifacts: ${{ matrix.label }}.zip
